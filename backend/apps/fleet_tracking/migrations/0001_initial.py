# Generated by Django 5.0.1 on 2025-08-14 16:59

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('fleet_assets', '0001_initial'),
        ('fleet_drivers', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LocationPoint',
            fields=[
                ('location_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('latitude', models.DecimalField(decimal_places=7, help_text='Latitude in decimal degrees', max_digits=10, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('longitude', models.DecimalField(decimal_places=7, help_text='Longitude in decimal degrees', max_digits=10, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('timestamp', models.DateTimeField(help_text='Time when location was recorded')),
                ('source_type', models.CharField(choices=[('gps_device', 'GPS Device'), ('mobile_app', 'Mobile App'), ('manual_entry', 'Manual Entry'), ('telematics', 'Telematics System'), ('driver_checkin', 'Driver Check-in')], max_length=15)),
                ('accuracy_meters', models.FloatField(blank=True, help_text='GPS accuracy in meters', null=True)),
                ('speed_kmh', models.FloatField(blank=True, help_text='Speed in km/h', null=True)),
                ('heading_degrees', models.FloatField(blank=True, help_text='Direction of travel in degrees (0-360)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(360)])),
                ('altitude_meters', models.FloatField(blank=True, help_text='Altitude in meters', null=True)),
                ('address', models.CharField(blank=True, default='', help_text='Reverse geocoded address', max_length=500)),
                ('odometer_reading', models.PositiveIntegerField(blank=True, help_text='Vehicle odometer at this point', null=True)),
                ('engine_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('fuel_level_percent', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_points', to='fleet_assets.asset')),
                ('driver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='fleet_drivers.driver')),
                ('recorded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='LocationZone',
            fields=[
                ('zone_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('zone_type', models.CharField(choices=[('depot', 'Depot/Base'), ('service_area', 'Service Area'), ('restricted', 'Restricted Zone'), ('customer_site', 'Customer Site'), ('maintenance_facility', 'Maintenance Facility'), ('fuel_station', 'Fuel Station'), ('parking', 'Parking Area'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField(blank=True, default='')),
                ('center_latitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('center_longitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('radius_meters', models.FloatField(help_text='Zone radius in meters')),
                ('is_active', models.BooleanField(default=True)),
                ('color', models.CharField(default='#0000FF', help_text='Hex color for map display', max_length=7)),
                ('alert_on_enter', models.BooleanField(default=False)),
                ('alert_on_exit', models.BooleanField(default=False)),
                ('alert_on_speeding', models.BooleanField(default=False)),
                ('speed_limit_kmh', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('allowed_vehicles', models.ManyToManyField(blank=True, related_name='allowed_zones', to='fleet_assets.asset')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RouteTemplate',
            fields=[
                ('route_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, default='')),
                ('estimated_duration_minutes', models.PositiveIntegerField(help_text='Estimated travel time')),
                ('estimated_distance_km', models.FloatField(help_text='Estimated distance')),
                ('waypoints', models.JSONField(default=list, help_text='Array of {lat, lng, name} waypoint objects')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_vehicles', models.ManyToManyField(blank=True, related_name='route_templates', to='fleet_assets.asset')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('default_driver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='fleet_drivers.driver')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Trip',
            fields=[
                ('trip_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('trip_name', models.CharField(blank=True, default='', max_length=200)),
                ('planned_start_time', models.DateTimeField()),
                ('planned_end_time', models.DateTimeField(blank=True, null=True)),
                ('actual_start_time', models.DateTimeField(blank=True, null=True)),
                ('actual_end_time', models.DateTimeField(blank=True, null=True)),
                ('total_distance_km', models.FloatField(default=0)),
                ('total_duration_minutes', models.PositiveIntegerField(default=0)),
                ('average_speed_kmh', models.FloatField(blank=True, null=True)),
                ('max_speed_kmh', models.FloatField(blank=True, null=True)),
                ('start_odometer', models.PositiveIntegerField(blank=True, null=True)),
                ('end_odometer', models.PositiveIntegerField(blank=True, null=True)),
                ('fuel_consumed_liters', models.FloatField(blank=True, null=True)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planned', max_length=15)),
                ('purpose', models.CharField(blank=True, default='', max_length=200)),
                ('notes', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trips', to='fleet_assets.asset')),
                ('driver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='fleet_drivers.driver')),
                ('end_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trips_ended', to='fleet_tracking.locationpoint')),
                ('route_template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='fleet_tracking.routetemplate')),
                ('start_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trips_started', to='fleet_tracking.locationpoint')),
            ],
            options={
                'ordering': ['-planned_start_time'],
            },
        ),
        migrations.CreateModel(
            name='ZoneEvent',
            fields=[
                ('event_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('enter', 'Zone Entry'), ('exit', 'Zone Exit'), ('speeding', 'Speed Violation'), ('dwelling', 'Extended Dwelling'), ('unauthorized', 'Unauthorized Access')], max_length=15)),
                ('event_time', models.DateTimeField()),
                ('speed_at_event', models.FloatField(blank=True, null=True)),
                ('duration_minutes', models.PositiveIntegerField(blank=True, help_text='Duration for dwelling events', null=True)),
                ('alert_sent', models.BooleanField(default=False)),
                ('alert_sent_at', models.DateTimeField(blank=True, null=True)),
                ('acknowledged', models.BooleanField(default=False)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zone_events', to='fleet_assets.asset')),
                ('location_point', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fleet_tracking.locationpoint')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='fleet_tracking.locationzone')),
            ],
            options={
                'ordering': ['-event_time'],
            },
        ),
        migrations.AddIndex(
            model_name='locationpoint',
            index=models.Index(fields=['asset', '-timestamp'], name='fleet_track_asset_i_d01123_idx'),
        ),
        migrations.AddIndex(
            model_name='locationpoint',
            index=models.Index(fields=['timestamp', 'source_type'], name='fleet_track_timesta_c0f117_idx'),
        ),
        migrations.AddIndex(
            model_name='locationpoint',
            index=models.Index(fields=['asset', 'source_type', '-timestamp'], name='fleet_track_asset_i_c17ae5_idx'),
        ),
        migrations.AddIndex(
            model_name='trip',
            index=models.Index(fields=['asset', '-planned_start_time'], name='fleet_track_asset_i_7e7126_idx'),
        ),
        migrations.AddIndex(
            model_name='trip',
            index=models.Index(fields=['driver', '-planned_start_time'], name='fleet_track_driver__cb51cd_idx'),
        ),
        migrations.AddIndex(
            model_name='trip',
            index=models.Index(fields=['status', 'planned_start_time'], name='fleet_track_status_427848_idx'),
        ),
        migrations.AddIndex(
            model_name='zoneevent',
            index=models.Index(fields=['asset', '-event_time'], name='fleet_track_asset_i_9e162c_idx'),
        ),
        migrations.AddIndex(
            model_name='zoneevent',
            index=models.Index(fields=['zone', '-event_time'], name='fleet_track_zone_id_65d0c7_idx'),
        ),
        migrations.AddIndex(
            model_name='zoneevent',
            index=models.Index(fields=['event_type', 'alert_sent'], name='fleet_track_event_t_9c50a6_idx'),
        ),
    ]
