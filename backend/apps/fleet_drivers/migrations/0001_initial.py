# Generated by Django 5.0.1 on 2025-08-14 16:59

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('fleet_assets', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('driver_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('employee_id', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('phone_number', models.CharField(blank=True, help_text='Phone number format: +1234567890', max_length=15, validators=[django.core.validators.RegexValidator(regex='^\\+?1?\\d{9,15}$')])),
                ('address', models.TextField(blank=True, default='')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('emergency_contact_name', models.CharField(blank=True, default='', max_length=100)),
                ('emergency_contact_phone', models.CharField(blank=True, default='', max_length=15)),
                ('license_number', models.CharField(max_length=50, unique=True)),
                ('license_class', models.CharField(choices=[('regular', 'Regular License'), ('cdl_a', 'CDL Class A'), ('cdl_b', 'CDL Class B'), ('cdl_c', 'CDL Class C'), ('motorcycle', 'Motorcycle License'), ('chauffeur', 'Chauffeur License')], max_length=20)),
                ('license_state', models.CharField(help_text='State abbreviation (e.g., CA, NY)', max_length=2)),
                ('license_issue_date', models.DateField()),
                ('license_expiry_date', models.DateField()),
                ('employment_status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('on_leave', 'On Leave'), ('suspended', 'Suspended'), ('terminated', 'Terminated')], default='active', max_length=20)),
                ('hire_date', models.DateField()),
                ('termination_date', models.DateField(blank=True, null=True)),
                ('medical_exam_date', models.DateField(blank=True, null=True)),
                ('medical_exam_expiry', models.DateField(blank=True, null=True)),
                ('has_medical_restrictions', models.BooleanField(default=False)),
                ('medical_restrictions', models.TextField(blank=True, default='')),
                ('safety_rating', models.PositiveIntegerField(default=5, help_text='Safety rating from 1 (poor) to 10 (excellent)')),
                ('total_miles_driven', models.PositiveIntegerField(default=0)),
                ('total_incidents', models.PositiveIntegerField(default=0)),
                ('last_training_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, default='')),
                ('profile_photo', models.ImageField(blank=True, null=True, upload_to='driver_photos/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_vehicles', models.ManyToManyField(blank=True, related_name='assigned_drivers', to='fleet_assets.asset')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drivers', to='fleet_assets.department')),
                ('supervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supervised_drivers', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='driver_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['user__last_name', 'user__first_name'],
            },
        ),
        migrations.CreateModel(
            name='DriverCertification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certification_type', models.CharField(choices=[('cdl_passenger', 'CDL Passenger Endorsement'), ('cdl_school_bus', 'CDL School Bus Endorsement'), ('cdl_hazmat', 'CDL Hazmat Endorsement'), ('defensive_driving', 'Defensive Driving'), ('first_aid', 'First Aid Certification'), ('forklift', 'Forklift Operation'), ('crane', 'Crane Operation'), ('dot_medical', 'DOT Medical Certificate'), ('safety_training', 'Safety Training'), ('other', 'Other Certification')], max_length=30)),
                ('certification_name', models.CharField(max_length=200)),
                ('certification_number', models.CharField(blank=True, default='', max_length=100)),
                ('issuing_authority', models.CharField(max_length=200)),
                ('issue_date', models.DateField()),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('is_required', models.BooleanField(default=False, help_text="Required for driver's role")),
                ('document', models.FileField(blank=True, null=True, upload_to='driver_certifications/')),
                ('notes', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certifications', to='fleet_drivers.driver')),
            ],
            options={
                'ordering': ['-expiry_date'],
            },
        ),
        migrations.CreateModel(
            name='DriverIncident',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('incident_type', models.CharField(choices=[('accident', 'Vehicle Accident'), ('traffic_violation', 'Traffic Violation'), ('safety_violation', 'Safety Violation'), ('policy_violation', 'Policy Violation'), ('customer_complaint', 'Customer Complaint'), ('commendation', 'Commendation'), ('other', 'Other')], max_length=30)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=10)),
                ('incident_date', models.DateField()),
                ('description', models.TextField()),
                ('location', models.CharField(blank=True, default='', max_length=500)),
                ('action_taken', models.TextField(blank=True, default='')),
                ('resolved', models.BooleanField(default=False)),
                ('resolution_date', models.DateField(blank=True, null=True)),
                ('cost_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('insurance_claim_number', models.CharField(blank=True, default='', max_length=100)),
                ('police_report_number', models.CharField(blank=True, default='', max_length=100)),
                ('documents', models.FileField(blank=True, null=True, upload_to='incident_documents/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incidents', to='fleet_drivers.driver')),
                ('reported_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('vehicle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='fleet_assets.asset')),
            ],
            options={
                'ordering': ['-incident_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DriverTraining',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('training_type', models.CharField(choices=[('safety', 'Safety Training'), ('defensive_driving', 'Defensive Driving'), ('vehicle_operation', 'Vehicle Operation'), ('customer_service', 'Customer Service'), ('compliance', 'Compliance Training'), ('emergency_procedures', 'Emergency Procedures'), ('other', 'Other Training')], max_length=30)),
                ('training_name', models.CharField(max_length=200)),
                ('instructor', models.CharField(blank=True, default='', max_length=100)),
                ('training_date', models.DateField()),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('hours_completed', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('is_required', models.BooleanField(default=False)),
                ('passed', models.BooleanField(default=True)),
                ('score', models.DecimalField(blank=True, decimal_places=2, help_text='Training score (percentage)', max_digits=5, null=True)),
                ('certificate', models.FileField(blank=True, null=True, upload_to='training_certificates/')),
                ('notes', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_records', to='fleet_drivers.driver')),
            ],
            options={
                'ordering': ['-training_date'],
            },
        ),
        migrations.AddIndex(
            model_name='driver',
            index=models.Index(fields=['employment_status', 'license_expiry_date'], name='fleet_drive_employm_690f60_idx'),
        ),
        migrations.AddIndex(
            model_name='driver',
            index=models.Index(fields=['department', 'employment_status'], name='fleet_drive_departm_6fcd91_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='drivercertification',
            unique_together={('driver', 'certification_type', 'certification_number')},
        ),
    ]
